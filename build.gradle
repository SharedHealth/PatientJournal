buildscript {
    repositories {
        maven { url "https://repo.spring.io/libs-release" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath(
                'org.springframework.boot:spring-boot-gradle-plugin:1.2.0.RELEASE'
                , 'net.saliman:gradle-cobertura-plugin:2.2.4'
                , 'com.netflix.nebula:gradle-ospackage-plugin:2.+'
        )
    }
}


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/libs-release" }
    jcenter()
}



apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'cobertura'
apply plugin: 'rpm'
apply plugin: 'war'

sourceCompatibility = 1.7

jar {
    baseName = 'patient-journal'
    version =  '0.1.0'
}


dependencies {
    compile group: "org.springframework.boot", name: "spring-boot-starter-web", version:"1.2.0.RELEASE"
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'me.fhir', name:'fhir-0.12', version: '0.3'
    compile group: 'rome', name:'rome', version:'1.0'
    compile group: 'org.apache.httpcomponents', name:'httpclient', version: '4.3.6'
    testCompile("junit:junit")
    testCompile("com.github.tomakehurst:wiremock:1.52")
    testCompile "org.mockito:mockito-core:1.8.4"
    testCompile "org.springframework:spring-test:4.0.3.RELEASE"
    testCompile 'com.jayway.restassured:rest-assured:2.4.0'
}


def getRunProcessBuilder() {
    def builder = new ProcessBuilder('./gradlew', 'run')
    builder.redirectOutput(ProcessBuilder.Redirect.INHERIT)
    return builder
}

def getDebugProcessBuilder() {
    def builder = new ProcessBuilder('./gradlew', 'run', '--debug', '--debug-jvm')
    builder.redirectOutput(ProcessBuilder.Redirect.INHERIT)
    return builder
}


task runPJ << {
    ProcessBuilder builder = getRunProcessBuilder()
    Process process = builder.start();
    process.waitFor();
}

task debugPJ << {
    ProcessBuilder builder = getDebugProcessBuilder()
    Process process = builder.start();
    process.waitFor();
}


cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File("$buildDir/reports/cobertura")
}

test.finalizedBy(project.tasks.cobertura)


mainClassName = "org.freeshr.journal.launch.Application"

war {
    from sourceSets.main.resources
    manifest {
        attributes('Main-Class': mainClassName)
    }
}

private Properties loadConfig() {
    Properties properties = new Properties()
    properties.load(new FileInputStream(file("${projectDir}/env/local.properties")));
    properties
}

task assembly(dependsOn: 'build') << {
    new File("${buildDir}/etc/").mkdir();
}

task exportProperties(dependsOn: 'assembly') << {
    PrintStream output = new PrintStream(new FileOutputStream(file("${buildDir}/etc/patient-journal")));
    Properties properties = loadConfig()
    properties.each { prop, val ->
        output.println("export " + prop + "=" + val)
    }
}

task dist(dependsOn: 'exportProperties', type: Rpm) {
    packageName = 'patient-journal'
    version = '0.1'
    release = 1
    arch = NOARCH
    os = LINUX

    into '/opt/patient-journal'

    postInstall = file('scripts/utils/postInstall.sh')
    preUninstall = file('scripts/utils/preUninstall.sh')
    postUninstall = file('scripts/utils/postUninstall.sh')

    from("${buildDir}/etc") {
        fileMode = 0755
        into 'etc'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'placeholder'
        into 'bin'
    }

    from("${buildDir}/libs") {
        fileMode = 0755
        into 'lib'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'patient-journal'
        into 'var'
    }
}


