buildscript {
    repositories {
        maven { url "https://repo.spring.io/libs-release" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath(
                'org.springframework.boot:spring-boot-gradle-plugin:1.2.0.RELEASE'
                , 'net.saliman:gradle-cobertura-plugin:2.2.4'
                , 'com.netflix.nebula:gradle-ospackage-plugin:2.+'
        )
    }
}


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/libs-release" }
    jcenter()
}



apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'cobertura'
apply plugin: 'rpm'
apply plugin: 'war'

sourceCompatibility = 1.7
mainClassName = "org.freeshr.journal.launch.Application"

jar {
    baseName = 'patient-journal'
}

def localEnv = new Properties();
localEnv.load(new FileInputStream(file('env/local.properties')))

test {
    environment localEnv
}

configurations.all {
    exclude module: 'spring-boot-starter-logging'
}

ext.libraries = [
        spring_boot_logging  : "org.springframework.boot:spring-boot-starter-log4j:1.2.0.RELEASE",
        guava                : "com.google.guava:guava:18.0",
        rome                 : "rome:rome:1.0",
        apache_httpclient    : "org.apache.httpcomponents:httpclient:4.3.6",
        apache_commons_lang3 : "org.apache.commons:commons-lang3:3.3.2",
        thymeleaf            : "org.springframework.boot:spring-boot-starter-thymeleaf",
        hapi_fhir_base       : 'ca.uhn.hapi.fhir:hapi-fhir-base:1.3',
        hapi_fhir_structures : 'ca.uhn.hapi.fhir:hapi-fhir-structures-dstu2:1.3'
]
ext.testLibraries = [
        junit                : "junit:junit",
        wiremock             : "com.github.tomakehurst:wiremock:1.52",
        mockito              : "org.mockito:mockito-core:1.8.4",
        spring_test          : "org.springframework:spring-test:4.0.3.RELEASE",
        jayway_rest_assured  : "com.jayway.restassured:rest-assured:2.4.0"
]


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web:1.2.0.RELEASE') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: "logback-classic"
    }
    compile('org.springframework.boot:spring-boot-starter-actuator:1.2.0.RELEASE') {
        exclude group: 'ch.qos.logback', module: "logback-classic"
    }
    compile libraries.values()
    testCompile testLibraries.values()
}


task runPJ(type: JavaExec) {
    Properties properties = new Properties();
    properties.load(new FileInputStream(file('env/local.properties')))
    main = mainClassName
    jvmArgs = ['-DPATIENT_JOURNAL_LOG_LEVEL=DEBUG']
    classpath = sourceSets.main.runtimeClasspath
    environment properties
}

task debugPJ(type: JavaExec) {
    Properties properties = new Properties();
    properties.load(new FileInputStream(file('env/local.properties')))
    main = mainClassName
    jvmArgs = ['-DPATIENT_JOURNAL_LOG_LEVEL=DEBUG',"-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"]
    classpath = sourceSets.main.runtimeClasspath
    environment properties
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File("$buildDir/reports/cobertura")
}

test.finalizedBy(project.tasks.cobertura)




war {
    manifest {
        attributes('Main-Class': mainClassName)
    }
}

private Properties loadConfig() {
    Properties properties = new Properties()
    properties.load(new FileInputStream(file("${projectDir}/env/local.properties")));
    properties
}

task assembly(dependsOn: 'build') << {
    new File("${buildDir}/etc/").mkdir();
}

task exportProperties(dependsOn: 'assembly') << {
    PrintStream output = new PrintStream(new FileOutputStream(file("${buildDir}/etc/patient-journal")));
    Properties properties = loadConfig()
    properties.each { prop, val ->
        output.println("export " + prop + "=" + val)
    }
}

task dist(dependsOn: 'exportProperties', type: Rpm) {
    packageName = 'patient-journal'
    version = '0.2'
    release = project.hasProperty('release') ? project.release : '1'
    arch = NOARCH
    os = LINUX

    into '/opt/patient-journal'

    postInstall = file('scripts/utils/postInstall.sh')
    preUninstall = file('scripts/utils/preUninstall.sh')
    postUninstall = file('scripts/utils/postUninstall.sh')

    from("${buildDir}/etc") {
        fileMode = 0755
        into 'etc'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'placeholder'
        into 'bin'
    }

    from("${buildDir}/libs") {
        fileMode = 0755
        into 'lib'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'patient-journal'
        exclude 'start.sh'
        into 'var'
    }
}


def exportEnvironmentVariablesToXML(defaults) {
    defaults.remove(defaults.envs)
    Properties environmentVariables = new Properties();
    environmentVariables.load(new FileInputStream(new File('env/local.properties')))
    defaults.append new NodeBuilder().envs() {
        environmentVariables.each { prop, value ->
            env(name: prop, value: value)
        }
    }
}

idea {
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.remove(junitDefaults.envs)
            junitDefaults.append new NodeBuilder().envs() {
                env(name: 'PATH_TO_CONFIG', value: "\$PROJECT_DIR\$/env/local.properties")
            }
            /*Configuring application runtime parameters*/
            exportEnvironmentVariablesToXML(runManager.configuration.find {
                it.@default == 'true' && it.@type == 'Application'
            });
        }
    }
    project {
        jdkName = '1.7'
        languageLevel = '1.7'
    }
}



